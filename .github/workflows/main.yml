name: Deploy S3 Upload Trigger

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: s3-upload-trigger

permissions:
  contents: read
  id-token: write

jobs:
  detect-changes:
    name: Detect Changes in Codebase
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.detect.outputs.terraform }}
      cli: ${{ steps.detect.outputs.cli }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: detect
        uses: ./.github/actions/detect-changes

  terraform-plan:
    name: Generate Terraform Plan
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.terraform == 'true' }}
    needs: detect-changes
    environment: production
    steps:
      - uses: actions/checkout@v4
      - id: plan
        uses: ./.github/actions/terraform-plan
        with:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.cli == 'true' }}
    needs: detect-changes
    environment: production
    outputs:
      image-tag: ${{ steps.build.outputs.SHORT_SHA }}
    steps:
      - uses: actions/checkout@v4

      - name: Build Application
        id: build
        uses: ./.github/actions/build
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          ecr-repository: ${{ env.ECR_REPOSITORY }}

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-plan]
    if: ${{ needs.detect-changes.outputs.terraform == 'true' }}
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Terraform Apply
        uses: ./.github/actions/terraform-apply
        with:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  update-lambda:
    name: Update Lambda Function
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.cli == 'true' }}
    environment: production
    needs: [detect-changes, build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Lambda to new image
        shell: bash
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest"
          echo "Updating Lambda to image: $ECR_URI"
          aws lambda update-function-code \
            --function-name s3-upload-trigger \
            --image-uri "$ECR_URI" \
            --region ${{ env.AWS_REGION }}

          echo "Waiting for Lambda update to complete..."
          aws lambda wait function-updated \
            --function-name s3-upload-trigger \
            --region ${{ env.AWS_REGION }}
